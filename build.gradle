buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

springBoot {
    mainClass = "catalog.Application"
}

jar {
    baseName = 'micro-catalog'
    version = '0.0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
//
//dependencyManagement {
//    imports {
//		mavenBom 'io.spring.platform:platform-bom:Brussels-SR5'
//    }
//}
//mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.0.4.RELEASE'

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework:spring-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile("mysql:mysql-connector-java:5.1.28")
    compile("com.squareup.okhttp3:okhttp:3.5.0")
    compile("org.yaml:snakeyaml:1.8")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.hamcrest:hamcrest-core')
    testCompile('junit:junit:[4,)')
	testCompile('org.springframework:spring-test')
	testCompile('com.jayway.jsonpath:json-path')
	//testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

}

test {
    useJUnit()
    testLogging {
        events 'failed', 'passed'
        showStandardStreams = true
    }
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		excludes = ['*Application*']
    }
}

task docker {
    doLast {
        copy {
            from 'build/libs/micro-catalog-0.0.1.jar'
            into 'docker'
        }
        file("docker/micro-catalog-0.0.1.jar").renameTo(file("docker/app.jar"))
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}


jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		xml.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/Application*'
			])
		})
	}
}

test.finalizedBy jacocoTestReport

check {
	dependsOn jacocoTestCoverageVerification
}